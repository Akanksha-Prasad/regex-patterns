package org.example.regex.problems;

import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import org.json.JSONObject;
import org.springframework.util.ResourceUtils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PentestNameValidation {

    public static void main(String[] args) throws IOException {
//        System.out.println(validNameIsProvided("{{9/0}}", "US"));
        //The regex pattern
        //Asterisk represents zero or more occurrences of that character that precedes it
//        final String REGEX_PATTERN = "^[\\p{L}\\p{N}\\p{Z}*`_'-]+$";
        final String REGEX_PATTERN_1 = "^[^{}\\[\\]()+=*%$#/<>^]+$";
        final String REGEX_PATTERN_CN = "^([A-Za-z\\xAA\\xBA\\xC0-\\xD6\\xD8-\\xF6ø-ɏʰ-˝ˠ-ˤ̀-́͗-͡Ḁ-ỿⱠ-Ɀﬀ-ﬆ '-.," +
                "]|[－Ａ-Ｚ＾｀-ｚ＇　㐀-䶵一-鿌豈-舘並-龎]|[\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40" +
                "-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD87E[\uDC00-\uDE1D]|[ '-.,])+$";
        String fileName = "classpath:regex/problems/" + "regex17-pentest-name-validation.txt";

        //Create a Pattern object
        Pattern pattern = Pattern.compile(REGEX_PATTERN_1);

        //Read the input file line by line
        try(BufferedReader bufferedReader =
                    new BufferedReader(new InputStreamReader(
                            Files.newInputStream(ResourceUtils.getFile(fileName).toPath())))) {
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                Matcher matcher = pattern.matcher(line);
                if (matcher.find()) {
                    System.out.println(line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static boolean validNameIsProvided(String name, String countryCode) throws IOException {

            JSONObject jsonObject =
                    convertJSONFFileToJSONObject("classpath:name-validation/name-validation.json");
            String regexPattern = jsonObject.getString(countryCode);
            return isValidName(name, regexPattern);
    }

    private static boolean isValidName(String name, String regexPattern) {
        Pattern pattern = Pattern.compile(regexPattern);
        Matcher matcher = pattern.matcher(name);
        return matcher.matches();
    }

    private static JSONObject convertJSONFFileToJSONObject(String jsonFilePath) throws IOException {

        String filePath = ResourceUtils.getFile(jsonFilePath).getAbsolutePath();
        return new JSONObject(new String(Files.readAllBytes(Paths.get(filePath)), StandardCharsets.UTF_8));
    }

}
